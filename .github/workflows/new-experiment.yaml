---
name: New Experiment
on:
  workflow_dispatch:
    inputs:
      name:
        description: Name of the experiment (used in project and team name)
        required: true
      description:
        description: Description of the experiment
        required: true

# interesting actions
# https://github.com/marketplace/actions/github-team-sync
#   - manage team members via json file in this repo
jobs:
  create_project:
    runs-on: ubuntu-latest
    # comes with: gh cli, jq, ...

    env:
      # This must be a PAT with org:admin access
      GH_TOKEN: ${{ secrets.GH_ORG_TOKEN }}
      BOT_ACCOUNT: ${{ secrets.BOT_ACCOUNT }}

      GH_PAGER: ''  # don't pipe into less

      # required to access preview projects API
      PROJECTS_MIME: application/vnd.github.inertia-preview+json
      GITHUB_MIME: application/vnd.github.v3+json

    steps:
      - name: Create Org-level Project and Team for Experiment
        # https://docs.github.com/en/rest/reference/projects
        # https://docs.github.com/en/rest/reference/teams
        run: |
          set -x
          EXPERIMENT_NAME="Experiment: ${{ github.event.inputs.name }}"
          PROJECT_ID=$(gh api -X POST -H "Accept: ${PROJECTS_MIME}" orgs/${{ github.repository_owner }}/projects -f name="${EXPERIMENT_NAME}" -f body='${{ github.event.inputs.description }}' --jq '.id')

          # make the project publicly visible
          gh api -X PATCH -H "Accept: ${PROJECTS_MIME}" projects/${PROJECT_ID} -f private=false

          ORG_REPOS=$(gh api graphql -F owner='${{ github.repository_owner }}' -f query='
            query($owner: String!, $endCursor: String) {
              repositoryOwner(login: $owner) {
                repositories(first: 100, isFork: true, after: $endCursor) {
                  nodes { name }
                  pageInfo { hasNextPage endCursor }
                }
              }
            }
          ' --paginate --jq '.data.repositoryOwner.repositories.nodes[].name')

          # create the team and grab the slug (privacy=closed means "visible")
          TEAM_SLUG=$(gh api -X POST -H "Accept: ${GITHUB_MIME}" orgs/${{ github.repository_owner }}/teams -f privacy=closed -f name="${EXPERIMENT_NAME}" -f description='${{ github.event.inputs.description }}' --jq '.slug')

          # link project to the team
          gh api -X PUT -H "Accept: ${PROJECTS_MIME}" "orgs/${{ github.repository_owner }}/teams/${TEAM_SLUG}/projects/${PROJECT_ID}" -f permission=write

          # add repo access for the team
          for repo in ${ORG_REPOS}; do
            gh api -X PUT -H "Accept: ${PROJECTS_MIME}" "orgs/${{ github.repository_owner }}/teams/${TEAM_SLUG}/repos/${{ github.repository_owner }}/${repo}" -f permission=push
          done

          # remove the bot from the team (it gets added automatically)
          gh api -X DELETE -H "Accept: ${GITHUB_MIME}" "orgs/${{ github.repository_owner }}/teams/${TEAM_SLUG}/memberships/${BOT_ACCOUNT}"
